// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sessions  TestSession[]
}

model Device {
  id          String   @id @default(cuid())
  name        String
  type        DeviceType
  manufacturer String?
  model       String?
  os          String
  osVersion   String
  resolution  String?
  isMobile    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  browserDevices BrowserDevice[]
}

model Browser {
  id          String   @id @default(cuid())
  name        String
  version     String
  engine      String?
  isMobile    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  browserDevices BrowserDevice[]
}

model BrowserDevice {
  id        String @id @default(cuid())
  deviceId  String
  browserId String
  isActive  Boolean @default(true)
  
  device    Device  @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  browser   Browser @relation(fields: [browserId], references: [id], onDelete: Cascade)
  
  sessions  TestSession[]
  
  @@unique([deviceId, browserId])
}

model TestSession {
  id              String            @id @default(cuid())
  userId          String
  browserDeviceId String?
  url             String?
  appPath         String?           // Path to uploaded mobile app
  appType         AppType?          // Type of mobile app
  status          SessionStatus     @default(CREATED)
  startedAt       DateTime?
  endedAt         DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  browserDevice   BrowserDevice?    @relation(fields: [browserDeviceId], references: [id], onDelete: Cascade)
  
  screenshots     Screenshot[]
  logs            TestLog[]
  networkRequests NetworkRequest[]
  
  @@index([userId])
  @@index([browserDeviceId])
}

model Screenshot {
  id          String   @id @default(cuid())
  sessionId   String
  filename    String
  path        String
  thumbnail   String?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  
  session     TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model TestLog {
  id        String      @id @default(cuid())
  sessionId String
  level     LogLevel    @default(INFO)
  message   String
  timestamp DateTime    @default(now())
  metadata  String?     // JSON string for additional data
  
  session   TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model NetworkRequest {
  id          String      @id @default(cuid())
  sessionId   String
  method      String
  url         String
  status      Int?
  timestamp   DateTime    @default(now())
  duration    Int?        // in milliseconds
  requestSize Int?
  responseSize Int?
  
  session     TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum DeviceType {
  DESKTOP
  MOBILE
  TABLET
}

enum SessionStatus {
  CREATED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum AppType {
  ANDROID_APK
  ANDROID_AAB
  IOS_IPA
}